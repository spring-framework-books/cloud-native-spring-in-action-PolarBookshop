server:
  port: 9001
  # By default, Spring Boot stops the server immediately after receiving a terminationsignal (SIGTERM). 
  # You can switch to a graceful mode by configuring the server.shut-down property. 
  shutdown: graceful
  tomcat:
    #   The server.tomcat.connection-timeout property defines a limit for how much time
    # Tomcat should wait between accepting a TCP connection from a client and actually
    # receiving the HTTP request. It helps prevent denial-of-service (DoS) attacks where a
    # connection is established, Tomcat reserves a thread to handle the request, and the
    # request never comes. The same timeout is used to limit the time spent reading the
    # HTTP request body when there is one.
    #  The default value is 20s (20 seconds), which is probably too much for a standard
    # cloud native application. In the context of highly distributed systems in the cloud, we
    # probably don’t want to wait more than a couple of seconds and risk a cascading failure
    # due to a Tomcat instance hanging for too long. Something like 2s would be better.
    connection-timeout: 2s
    # configure how long to keep a connection open while waiting for new HTTP requests. 
    keep-alive-timeout: 15s
    threads:
    # Tomcat has a pool of threads that process requests, following the thread-per-request
    # model. The number of available threads will determine how many requests can be
    # handled simultaneously. You can configure the maximum number of request process-
    # ing threads through the server.tomcat.threads.max property. You can also define
    # the minimum number of threads that should always be kept running (server.tomcat
    # .threads.min-spare), which is also how many threads are created at startup.
    #  Determining the best configuration for a thread pool is complicated, and there’s
    # no magic formula for computing it. Resource analysis, monitoring, and many trials
    # are usually necessary to find a suitable configuration. The default thread pool can
    # grow up to 200 threads and has 10 worker threads always running, which are good
    # starting values in production. In your local environment, you might want to lower
    # those values to optimize resource consumption, since it increases linearly with the number of threads.
      max: 50
      min-spare: 5

spring:
  application:
    name: catalog-service
  lifecycle:
    #    You can also configure the grace period, which is how long the applica-
    # tion can spend processing all the pending requests. After the grace period expires,
    # the application is terminated even if there are still pending requests. By default, the
    # grace period is 30 seconds. 
    timeout-per-shutdown-phase: 15s 
  config:
    # we can use (optional:configserver:http:/ /localhost:8888
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari:
      # The maximum time (ms) to spend waiting to get a connection from the pool
      connection-timeout: 2000 #ms
      # The maximum number of connections HikariCP will keep in the pool
      maximum-pool-size: 5
management:
  endpoints:
    web:
      exposure:
        #Exposes the /actuator/refresh endpoint through HTTP
        include: refresh

polar:
  greeting: Welcome to the local book catalog! from Tilt reloaded
