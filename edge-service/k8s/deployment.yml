apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-service
  labels:
    app: edge-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: edge-service
  template:
    metadata:
      labels:
        app: edge-service
      annotations:
        # Signals that Prometheus should scrape containers in this Pod
        prometheus.io/scrape: "true"
        # Identifies the HTTP endpoint that exposes Prometheus metrics
        prometheus.io/path: /actuator/prometheus
        # Specifies the port number where the metrics endpoint is available
        prometheus.io/port: "9000"
    spec:
      containers:
        - name: edge-service
          image: edge-service
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 5" ]
          ports:
            - containerPort: 9000
          env:
            - name: CATALOG_SERVICE_URL
              value: http://catalog-service
            - name: ORDER_SERVICE_URL
              value: http://order-service
            - name: SPA_URL
              value: http://polar-ui
            - name: SPRING_CLOUD_CONFIG_URI
              value: http://config-service
            - name: SPRING_DATA_REDIS_HOST
              value: polar-redis
            - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI
              value: http://polar-keycloak/realms/PolarBookshop
            - name: OTEL_SERVICE_NAME
              value: catalog-service
            # The URL of the distributed tracing backend supporting the OpenTelemetry protocol (OTLP)
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://tempo:4317
            - name: OTEL_TRACES_EXPORTER
              value: otlp
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: grpc
            - name: OTEL_LOGS_EXPORTER
              value: none
            - name: OTEL_METRICS_EXPORTER
              value: none
            - name: OTEL_RESOURCE_PROVIDERS_GCP_ENABLED
              value: "true"
          # Configuration for the liveness probe
          livenessProbe:
            # Uses an HTTP GET request to get the liveness state
            httpGet:
              # The endpoint to call for the liveness state
              path: /actuator/health/liveness
              # The port to use to fetch the liveness state
              port: 9000
            # An initial delay before starting checking the liveness state
            initialDelaySeconds: 10
            # The frequency for checking the liveness state
            periodSeconds: 5
          # Configuration for the readiness probe
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 15