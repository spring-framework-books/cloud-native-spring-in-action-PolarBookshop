server:
  port: 9002
  # By default, Spring Boot stops the server immediately after receiving a terminationsignal (SIGTERM). 
  # You can switch to a graceful mode by configuring the server.shut-down property. 
  shutdown: graceful
  netty:
    # How long to wait for a TCP connection to be established with the server
    connection-timeout: 2s
    # How long to wait before closing a TCP connection if no data is transferred
    idle-timeout: 15s 

polar:
  catalog-service-uri: "http://localhost:9001"

spring:
  application:
    name: order-service
  lifecycle:
    #    You can also configure the grace period, which is how long the applica-
    # tion can spend processing all the pending requests. After the grace period expires,
    # the application is terminated even if there are still pending requests. By default, the
    # grace period is 30 seconds. 
    timeout-per-shutdown-phase: 15s 
  config:
    # we can use (optional:configserver:http:/ /localhost:8888
    import: "optional:configserver:"
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      # The maximum time to wait to get a connection from the pool
      max-create-connection-time: 2s 
      # The initial size of the connection pool
      initial-size: 5 
      # The maximum number of connections kept in the pool
      max-size: 10 
  # Flyway doesn’t support R2DBC yet, so we
  # need to provide a JDBC driver to communicate with the database. The Flyway migra-
  # tion tasks are only run at application startup and in a single thread, so using a non-
  # reactive communication approach for this one case doesn’t impact the overall applica-
  # tion’s scalability and efficiency.
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
    function:
      # the dispatchOrder-in-0 binding (inferred from the dispatchOrder function name) is mapped to the order-dispatched exchange in RabbitMQ. 
      # Definition of the function managed by Spring Cloud Function
      # The consumers in Order Service will be part of the order-service consumer group, and Spring
      # Cloud Stream will define a message channel between them and an order-dispatched
      # .order-service queue in RabbitMQ.
      definition: dispatchOrder
    stream:
      bindings:
      # The input binding
        dispatchOrder-in-0:
          # The actual name at the broker that the binder binds to (the exchange in RabbitMQ)
          destination: order-dispatched
          # The consumer group interested in the destination (the same as the application name)
          group: ${spring.application.name}
          # Output binding created and managed by StreamBridge
        acceptOrder-out-0:
          # The actual name at the broker that the binder binds to (the exchange in RabbitMQ)
          destination: order-accepted
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              # Spring Boot comes preconfigured with transaction management functionality and
              # can handle transactional operations involving relational databases (as you learned in
              # chapter 5). However, the channel established with RabbitMQ for the message pro-
              # ducer is not transactional by default. To make the event-publishing operation join the
              # existing transaction, we need to enable RabbitMQ’s transactional support for the mes-
              # sage producer
              transacted: true
  security:
    oauth2:
      resourceserver:
        # OAuth2 doesn’t enforce a data format for Access Tokens, so we must be explicit about our choice. In this case, we want to use JWT.
        jwt:
          # The Keycloak URL providing information about all the relevant OAuth2 endpoints for the specific realm
          issuer-uri: http://localhost:8080/realms/PolarBookshop
  #Configures the integrations with RabbitMQ
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Polar Bookshop

management:
  endpoints:
    web:
      exposure:
        include: bindings, configprops, env, flyway, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}